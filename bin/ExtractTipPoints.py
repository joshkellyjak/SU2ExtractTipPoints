# ===============================================================
# File:            ExtractTipPoints.py
# Project:         Turbine Blade Tip Surface Identification
# Description:     Identifies tip surface points on a discretized
#                  turbine blade mesh
#
# Author:          Joshua A. Kelly
# Insititution:    Univeristy of Liverpool
# Date Created:    01/08/2025 (DD/MM/YYYY)
# Python Version:  3.10.13
#
# Dependencies:    numpy, matplotlib
#
# Notes:
#   - Point data is taken from MoveSurface files generated by SU2
#     based on meshes generated in ANSYS TurboGrid
#   - Designed for unstructured point clouds with no connectivity
#
# ===============================================================


import sys
import numpy as np
from utils.io import *
from utils.plotting import *
from core.point import getRemovedSharedPoints, buildPointDictionary
from core.SU2MeshReader import SU2Mesh

def main():
    config_fname = sys.argv
    print("Reading config file...")
    config = Config(config_fname)
    blade_fname = config.IN['paths']['blade_file']
    blade_high_fname = config.IN['paths']['blade_high']
    blade_low_fname = config.IN['paths']['blade_low']

    print("Reading mesh data...")
    mesh = SU2Mesh("APU_rotor.su2")

    print("Building blade from point data...")
    blade_high = readPointData(readData(blade_high_fname), False)
    blade_low = readPointData(readData(blade_low_fname), False)
    blade_high = getRemovedSharedPoints(blade_high, blade_low)
    blade_no_tip = blade_high + blade_low
    blade = readPointData(readData(blade_fname), False)
    blade_dict = buildPointDictionary(blade)

    print("Finding tip points...")
    tip_points = getRemovedSharedPoints(blade, blade_no_tip)
    tip_indices = np.array([int(p.index) for p in tip_points])
    adjacent_indices = mesh.getAdjacentIndices(tip_indices)
    tip_indices = np.concatenate([tip_indices, adjacent_indices])
    tip_points = list()
    for idx in tip_indices:
        tip_points.append(blade_dict[idx])

    print("Writing MoveSurface files...")
    writeCombinedMoveSurface("MoveSurface_Blade_tip.txt", tip_points)
    writeCombinedMoveSurface("MoveSurface_Blade_No_Tip.txt", blade_no_tip)
    plotPoints(tip_points)
    plotCylPoints(tip_points)
    plt.show()
    print("hello")

if __name__ == "__main__":
    main()